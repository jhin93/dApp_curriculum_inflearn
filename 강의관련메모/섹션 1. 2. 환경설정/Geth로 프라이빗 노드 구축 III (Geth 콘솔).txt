[ Geth로 프라이빗 노드 구축 III (Geth 콘솔) ]

(채굴 진행중..)

0:10 | 백그라운드로 돌고 있는 노드에 연결시켜서 자바스크립트 콘솔로 보여주는 작업

    geth attach ipc:\\.\pipe\geth.ipc 입력.
    오류발생 : Fatal: Unable to attach to remote geth: dial unix \.pipegeth.ipc: connect: no such file or directory
    오류해결 : geth attach ipc:geth.ipc  이렇게 입력하니까 됨. 입력방식이 다른 듯(업그레이드가 된건지, 맥과 윈도우의 차인지..). 

1:15 | 콘솔정보확인

    eth.coinbase - 코인베이스계정. 제일 첫번째로 만들었던 계정. 0x0906ad8642cfcc68ecd1bd394acb64d3ddac8dd2
    (ex coinbase: 0x0906ad8642cfcc68ecd1bd394acb64d3ddac8dd2)
    modules - 해당 창에서 쓸 수 있는 api를 나열한 것. nodestart.cmd 파일을 만들었을 때 파라미터로 http.api를, 값으로 eth,web3,personal,net를 주었음. 해당 api들을 콘솔에서 사용가능.
    (ex modules: admin:1.0 debug:1.0 eth:1.0 ethash:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0)
    
    [ ether api 명령어 ]
    ? eth.coinbase - 코인베이스 계정(첫번째로 만들었던 계정).
    ? eth.accounts - 현재 이 노드에 등록된 모든 계정들이 나옴.
    ? eth.getBalance(계정)- 계정에 에더가 얼마나 들어가있는지 알려줌. 
    ex) eth.getBalance(eth.accounts[1]) = 두번째 계정의 에더
    > eth.getBalance(eth.accounts[0])
    674000000000000000000 - 강의처럼 wei로 변환해서 보여주지는 않네..
    * wei : 에더를 나타내는 가장 작은 단위
    ? eth.mining - 현재 채굴중인지 확인하는 명령어
    ? eth.hashrate - 채굴속도를 보여주는 명령어 https://dejavuqa.tistory.com/234

    wei를 에더로 변환해서 값을 보는 방법 - web3 api의 fromWei함수를 사용할 수 있음.
    [ web3 api 명령어 ]
    ? web3.fromWei() - 어떤 wei 값도 ether로 변환해 보여준다. https://web3js.readthedocs.io/en/v1.2.11/web3-utils.html
    ex) > web3.fromWei(eth.getBalance(eth.coinbase), "ether")
        744

    [miner api 명령어]
    ? miner.stop() - 채굴을 멈추는 명령어.
    ? miner.start(n) - n개의 스레드에서 채굴을 시작하게 하는 명령어. 채굴 도중 입력하면 'Updated mining threads' 라는 메시지가 뜸.
    스레드 수를 늘리면 채굴을 빨라지지만 에너지는 많이 먹음.

    오류발생 : 
    1. miner.stop() 입력시 null 리턴함. 근데 제대로 작동은 했는지 eth.mining 은 false 값 나옴.
    2. minert.start(2) 해도 null 리턴함. 근데 제대로 작동은 하는지 eth.mining 은 true 값 나옴. 근데 강의도 null 나오는거 보면 그냥 버그인듯.

3:25 | 계정을 unlock하기

    계정을 unlock하는 건 해당 계정의 private key를 열어서 트랜잭션에 서명할 수 있게 하는 것.
    default로 private 키는 항상 잠겨있음. 계정의 비밀번호를 알아야 unlock가능. 그리고 설정한 시간 동안만 unlock 할 수도 있다.

    첫번째 계정은 채굴보상금을 받기 위해 unlock을 했으니 두번째 계정을 unlock 시도.

    > personal.unlockAccount(eth.accounts[1], "bimilbunho", 200)
    personal api 사용
    -> 어느 계정을 unlock할 것 인지(eth.accounts[1])
    -> 해당 계정의 비밀번호("bimilbunho")
    -> 얼마 동안 unlock 할 것 인지(200 : 200초)
    
4:40 | 계정간 송금

    코인베이스 계정에서 2번째 계정으로 20 에더를 송금.
    eth.sendTransaction({from:eth.coinbase, to:eth.accounts[1], value:web3.toWei(20, "ether")})
    오류발생 : Error: authentication needed: password or unlock
    해결 : personal.unlockAccount(eth.accounts[0]) 으로 트랜잭션을 발생시키는 계좌를 언락시킨다. https://good-coding.tistory.com/34 
    근데 그 말은 nodestart.cmd를 만들 때 첫번째 계정이 언락이 안되었다는 말 아닌가? 확실히 '--unlock 0' 를 '--allow-insecure-unlock'로 바꿀 때 어떤 계정을 언락할지 파라미터가 없기는 하다.
    
    트랜잭션 해쉬("0xe01f9976d363992b5249327cc3fc279fe6...")가 리턴됨. 새로운 트랜잭션이 만들어짐. 노드로 보내짐. 
    채굴하는 창에서 'Submitted transaction' 이라고 확인할 수 있음. 해쉬 정보(hash=0xe01f9976d363...트랜잭션 해쉬를 말하는 듯)와 수령인의 address(from=0x0906ad8642)을 확인 가능.
    이 트랜잭션이 다음 채굴되는 블록에 추가됨.
    
    두번째 계정의 잔액으로 확인 가능
    > eth.getBalance(eth.accounts[1])
    20000000000000000000 - 송금받은 20에더를 wei로 표현한 것. 에더로 보고 싶다면 web3.fromWei(eth.accounts[1], "ether")로 확인 가능.

    이렇게 콘솔을 통해 노드와 소통 가능.

    exit - 콘솔에서 나갈 수 있음



