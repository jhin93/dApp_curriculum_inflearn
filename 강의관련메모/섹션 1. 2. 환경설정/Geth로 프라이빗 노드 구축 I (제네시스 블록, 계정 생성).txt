0:50 | 제네시스 블록 생성

    제네시스 블록은 노드 초기화에 반드시 필요함.
    $ puppeth : puppeth 실행

    What would you like to do? (default = stats)
    1. Show network stats
    2. Configure new genesis
    3. Track new remote server
    4. Deploy network components
    - 2. configure new genesis
    
    Which consensus engine to use? (default = clique)
    1. Ethash - proof-of-work
    2. Clique - proof-of-authority
    - 1번 선택(이더리움은 현재 작업증명 사용)

    Which accounts should be pre-funded? (advisable at least one)
    (어떤 계정에 미리 에더를 받아야 합니까?)
    - 엔터로 스킵

    Should the precompile-addresses (0x1 .. 0xff) be pre-funded with 1 wei? (advisable yes)
    - 엔터로 스킵(내 판단)

    Specify your chain/network ID if you want an explicit one (default = random)
    네트워크에 쓰일 체인이나 네트워크 아이디를 정해야 함. 네트워크 아이디를 정할 때 퍼블릭 네트워크에서 쓰는 아이디는 피해야 함.
    예약어 1번은 main network를 사용. 2번은 모던 테스트 네트워크, 3번은 Ropsten 테스트 네트워크, 4번은 Rinkeby 테스트 네트워크, 42번은 Kovan 테스트 네트워크

    제네시스 블록을 json 파일로 추출해야 함.
    What would you like to do? (default = stats)
    1. Show network stats
    2. Manage existing genesis
    3. Track new remote server
    4. Deploy network components
    > 2

    1. Modify existing configurations
    2. Export genesis configurations
    3. Remove genesis configuration
    > 2

    Which folder to save the genesis specs into? (default = current)
    Will create mynetwork.json, mynetwork-aleth.json, mynetwork-harmony.json, mynetwork-parity.json
    > (엔터)
    INFO [06-30|16:17:04.946] Saved native genesis chain spec          path=mynetwork.json
    INFO [06-30|16:17:04.952] Saved genesis chain spec                 client=aleth path=mynetwork-aleth.json
    INFO [06-30|16:17:04.954] Saved genesis chain spec                 client=parity path=mynetwork-parity.json
    INFO [06-30|16:17:04.957] Saved genesis chain spec                 client=harmony path=mynetwork-harmony.json

    제네시스 블록 추출.

    여기서 Puppeth는 할일 끝남. ctrl + c 로 나감.


    [제네시스 블록 내부 설명]
    config - config 내부의 필드들은 체인의 파라미터를 정의하는데 사용됨.
    ex) 만들때 사용한 4386, ethash 등

    timestamp - 연속되는 두개의 블록의 timestamp의 차이가 작으면 난이도가 올라가고, 크면 난이도가 내려간다. 
    블록들이 올바른 순서로 진행되는 지도 확인한다. 

    gaslimit - 블록내의 트랜잭션이 소비할 수 있는 최대 가스한도. 각 블록마다 트랜잭션을 몇개나 처리할 것인지 제한하여 블록의 사이즈를 조절.

    alloc - 지갑 주소에 자금을 미리 할당하는 내용.

    number - 블록 넘버. 제네시스 블록은 0.

    gasUsed - 블록 내에서 여러가지 트랜잭션을 사용하면서 사용된 모든 가스의 합. 현재 수업을 위한 제네시스 블록은 트랜잭션이 없어서 값이 0.

    parentHash - 부모 블록의 해쉬. 제네시스 블록은 부모가 없어서 값이 0.


7:46 | 제네시스 블록으로 프라이빗 노드를 초기화에

    $ geth --datadir . init mynetwork.json
    geth 명령어를 사용하여 현재 디렉토리에 프라이빗 노드 데이터를 저장(--datadir). 
    'init'은 프라이빗 노드를 초기화하기 위한 제네시스 블록의 파일 이름을 명시하기 위해 쓰임. mynetwork.json이 제네시스 블록이라고 명시.

    위와 같이 제네시스 블록을 사용해 노드 초기화를 할 수 있다.
    새로 생성된 'geth' 폴더에는 모든 체인에 대한 데이터가 저장되어있음.
    'keystore' 폴더에는 새로 생성될 계정에 대한 정보가 담김.


    $ geth --datadir . account new
    'keystore' 폴더에 새로운 이더리움 계정을 무작위로 생성.
    계정 생성시 비밀번호 입력 필요. 비밀번호로 private key를 보호.
    비밀번호 : bimilbunho

    위 비밀번호로 계정 3개 생성. 'keystore' 폴더에서 확인 가능.


    $ geth --datadir . account list
    계정들을 리스트로 보여주는 명령어. 어느 순서로 생성되었는지 보여준다.
    ※ 참고 : 모든 채굴 보상금이 첫번째 계정으로 들어감.




