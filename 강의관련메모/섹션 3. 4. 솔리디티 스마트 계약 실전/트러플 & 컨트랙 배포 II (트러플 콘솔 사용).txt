0:10 | web3 api 사용 (강의 내용은 트러플 버전은 4이고 현재 트러플 버전은 5라서 명령어에 차이가 있음. 커뮤니티에서 '트러플' 검색)

    web3.eth.getAccounts() : 테스팅 계정들을 확인할 수 있음. 강의 화면과 다름. https://web3js.readthedocs.io/en/v1.2.0/web3-eth.html#getaccounts
    web3.eth.getCoinbase() : 보상받는 첫번째 계정 호출. ex) '0xed1e548f5b9a7ce5323ef3ef260c727626c773fd'
    web3.eth.getBalance() : 해당 계정의 잔액확인. ex) web3.eth.getBalance('0xed1e548f5b9a7ce5323ef3ef260c727626c773fd') - '99998766606000000000'
    web3.utils.fromWei('수', 단위) : 바꾸려는 수를 넣고 뒤에 목표단위를 넣으면 목표단위로 수를 환산해준다. ex) web3.utils.fromWei('1', 'ether'); -> "0.000000000000000001"

    커뮤니티에서 질문에 달린 답글로는 web3.utils.fromWei(await web3.eth.getBalance(await web3.eth.getCoinbase()), 'ether') // https://www.inflearn.com/course/blockchain-%EC%9D%B4%EB%8D%94%EB%A6%AC%EC%9B%80-dapp/lecture/13329?tab=community&mm=close&q=11873
    -> 이렇게 입력하여 해결하라는데 다음과 같은 에러만 나옴. 에러 : Uncaught SyntaxError: missing ) after argument list

    그래서 위 메소드들을 각자 따로 써서 환산값을 구하면 나오기는 함.

    2번째 계정 얻는 법 
    1. web3.eth.getAccounts().then(function(acc){accounts=acc;}); // 함수 실행 후(web3.eth.getAccounts()) 그 결과(배열 형태의 계정 10개)를 accounts 변수에 담는다.
    2. accounts[1];

2:25 | 트러플 노드에 배포했던 MyContract 불러오기, 내부 함수 사용.

    1. 전역변수에 MyContract의 인스턴스를 저장
        MyContract.deployed().then(function(instance){ app = instance; })
        MyContract을 배포(deployed())하고 나서 .then 함수 실행.
        트러플로부터 MyContract의 인스턴스를 콜백으로 받게 됨. 이 인스턴스를 전역변수 app에 저장.

    오류발생 : Uncaught ReferenceError: MyContract is not defined
    해결시도 : https://ethereum.stackexchange.com/questions/45305/truffle-develop-get-new-contract-instance-from-contract-address/45405

-------------------------------------------- 

버전 차이로 시간을 너무 많이 소모(오류 많이 발생). 
트러플 콘솔 강의는 넘어가고 여기서 트러플 튜토리얼 따라감. https://www.youtube.com/watch?v=ZaqAwOzEiQ8&list=LL&index=2 

해결 : 
먼저, 우리의 컨트랙을 나타내는 자바스크립트 객체인 컨트랙 인스턴스를 가져와야 한다.

1. let 변수 = await 컨트랙이름.deployed()
ex)
let instance = await Helloworld.deployed()

2. 변수.함수이름
Ex) 
instance.setStudent - 함수호출. 인자가 필요한 경우도 있음
instance.hello() - 함수사용

-------------------------------------------- 

4:15 | setStudentInfo를 통해 노드에 학생 정보를 입력
    파라미터 4개(아이디, 이름, 성별, 나이) + 추가 파라미터(두번째 계정)
    추가 파라미터는 트러플 내부에서 인식하는 파라미터. setStudentInfo 함수를 쓸 때, 어느 계정(두번째 계정)으로 불러와서 쓰는 건지 명시해주어야 함.
    app.setStudentInfo(1111, "sejong", "male", 7, {from: web3.eth.accounts[1]})

    오류발생 : Uncaught Error: The send transactions "from" field must be defined!
    해결 : https://ethereum.stackexchange.com/questions/62803/the-send-transactions-from-field-must-be-defined
    web3.eth.accounts[1]를 accounts로만 사용하니까 가능했다.
    
    콘솔에 accounts를 치니까 계정 리스트가 나왔다. web3.eth.getAccounts()와 동일한 결과를 출력한 것.
    accounts 라는 변수를 선언하고 거기에 계정을 담은 기억이 없는데 아마 버전이 업데이트 되면서 사용이 편해진 듯 싶다.


5:35 | 두번째 계정으로 노드에 정보를 입력한 뒤(setStudentInfo), 두번째 계정의 잔액이 얼마나 남았는가

    1. web3.eth.getBalance(accounts[1]) // '99999828640000000000'
    2. web3.utils.fromWei('99999828640000000000', 'ether')
    

6:06 | setStudentInfo를 통해 입력한 정보 불러오기.

    getStudentInfo 함수 사용.
    app.getStudentInfo(1111)
    // 결과
    Result {
        '0': 'sejong',
        '1': 'male',
        '2': BN {
                negative: 0,
                words: [ 7, <1 empty item> ],
                length: 1,
                red: null
            }
    }

    getStudentInfo 함수는 view 타입이라 트랜잭션을 생성하지도, 가스비를 지불하지도 않는다.










