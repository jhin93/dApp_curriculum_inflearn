

코드 최적화를 위해 가장 염두해야 하는 것.

• 배열 사용시 주의점
    - 무제한 크기의 배열 반복 피해야 함 
    for 문이 돌 때 한번씩 반복될 때 마다 가스가 소비됨. 반복해야될 데이터가 많아서 for문이 계속 돌아감.
    언젠가 가스 한도에 가까워지고 한도를 넘어감. 데이터 처리도중 함수를 끝내지도 못하고 셧다운됨.
    솔리디티는 가스 한도라는 개념 때문에 루프를 오래 돌릴 수 없음.

    반복문은 길이 50 이하의 배열을 돌릴 때 상대적으로 효율적.
    50 이상일 때는?

    이럴 때 매핑을 사용한다.

    [ 코드예시 ]

    struct Student {
        uint studentId;
        string name;
    }

    Student[] students; // 구조체를 배열화 시킨 상태변수 students.

    // 위 배열에 학생이 몇만명 추가되었다고 가정. 계속 추가되는 중.
    // 아래 함수는 students 배열에 있는 어떤 학생 정보를 찾아와서 업데이트 시키는 함수.

    function updateStudentById (uint _studentId, string _name) public {
        for (uint i = 0; i < students.length; i++) {
            if (students[i].studentId == _studentId) {
                students[i].name = _name;
            }
        }
    }

    // 위 코드로어떤 학생을 찾기 위해 몇만명을 for 문으로 돌려야 함. 가스비 펑펑 터지는 소리남.



    [ 해결예시 ] : 매핑을 사용

    struct Student {
        uint studentId;
        string name;
    }

    mapping(uint => Student) studentInfo; // 매핑선언.

    function updateStudentById (uint _studentId, string _name) public {
        Student storage student = studentInfo[_studentId]; // 키값으로 학생 아이디를 조회하면, 밸류값이 바로 나옴
        student.name = _name; // 나온 밸류값을 업데이트.
    } 
    // 가스 비용을 확연히 줄일 수 있는 케이스.

    그렇다고 모든 케이스에 매핑을 적용하는 건 아님.
    다량의 데이터를 iteration, 일련성 있게 하나하나 돌려가면서 작업할 수 있는 배열의 장점이 있음. 데이터 길이가 크지 않을 땐 매핑보다 배열을 추천.













