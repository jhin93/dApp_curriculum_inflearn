참조 타입(매핑)

mapping(_KeyType => _ValueType)         Key & Value를 쌍으로 저장하는 자바의 map과 비슷.
                                        KeyType : 동적배열, 열거형, 구조체, 매핑을 제외한 타입 가능
                                        ValueType : 매핑 포함 모든 타입 가능


contract MyContract {
    mapping(address => uint256) balance; // 이 매핑이 의미하는 것은 어떤 이더리움 계정 주소만의 양수값이 블록체인 안에 존재.

    function learnMapping() public {
        balance[msg.sender] = 100; // msg.sender는 현재 이 함수를 불러오는 계정 주소이다. msg.sender에 100이 매핑된 것.
        balance[msg.sender] += 100;

        uint256 currentBalance = balance[msg.sender]; // balance 변수의 value 타입이 uint256임. 이 밸류값을 받기 위해 currentBalance를 uint256으로 설정.
    }                                                 // currentBalance에는 200이 저장됨.

}

contract Mycontract {
    struct Student {
        string studentName;
        string gender;
        uint age;
    }

    mapping(uint256 => Student) studentInfo; // 키 타입에 uint256, 밸류타입에 Student 구조체. 
                                                양수값을 키값으로 넣으면 매핑된 밸류값으로 Student 구조체 정보가 불러와짐.
                                                저장 위치가 storage이기 때문에 student 변수가 studentInfo 상태변수를 포인팅하게 됨.

    function setStudent(uint _studentId, string _name, string _gender, uint _age) public {
        Student storage student = studentInfo[_studentId]; // _studentId를 1234라고 가정. 1234 키값에 매핑된 밸류값을 가져옴. 그것을 Student 구조체 변수(student)에 대입.
        // 각각 필드에 매개변수로 받은 자료형들 대입.
        student.studentName = _name;
        student.gender = _gender;
        student.age = _age;
        // 결과적으론 1234 키값에 매핑된 밸류값에 수정된 Student 정보가 새롭게 세팅됨
    }

    function getStudentInfo(uint256 _studentId) view public returns(string, string, uint) { // studentInfo 상태변수의 밸류값을 불러오는 함수.
        // 매개변수로 받은 _studentId (ex 1234)를 키값으로 활용하여 키값에 매핑된 밸류값인 Student를 불러온다.
        return (studentInfo[_studentId].studentName, studentInfo[_studentId].gender, studentInfo[_studentId].age) // 아직 솔리디티에서 구조체 자체를 리턴하는 것은 지원하지 않음.
    }
}








