타입                    값                      추가설명                    예시
int               8bit ~ 256bit            int == int256            int32 x = -27462; // 음수, 양수 모두 표현
uint              8bit ~ 256bit            uint == uint256          uint256 x = 2542522; // 양수만 표현. 양수만 저장하기에 저장가능한 수의 크기가 큼.
* 사용할 숫자의 범위를 생각해서 변수를 지정하는게 최적화 측면에서 유리.

address       20 byte의 이더리움 계정 주소      두개의 멤버 소유: balance(소유한 에더 조회), transfer(소유한 에더 전송)

bytes           1 byte ~ 32 byte            byte == bytes1          bytes32 x = "hello world"; -> 문자열을 bytes에 저장할 땐 라이브러리 등을 사용해서 아래와 같이 hex로 변환해서 저장해야 함.
                                                                    bytes32 x = "0x68656c6c6f20776f726c64". 솔리디티는 string보다는 32바이트 문자열에 최적화됨. 
                                                                    만약 사용할 문자열이 32 byte를 초과할 경우 string을 사용. string 타입은 byte 타입보다 가스비용을 더 요구함.
bytes/string          무한                 값 타입이 아니라 참조 타입       bytes[] names;
(동적인 크기의 bytes 배열. 배열의 크기가 고정적이지 않고 무한)

enum            이름{value, value2}         값을 정수형으로 리턴          enum Direction { Right, Left } // 열거형 선언.  
(열거형)                                                              Direction direction; // 컨트랙에서 쓸 수 있게 변수로 선언

                                                                    function getDirection() public returns(uint) {
                                                                        direction = Direction(newDirection);
                                                                    } // getDirection(Left)의 값은 1이다. Left의 인덱스가 1 이기에.

                                                                    function setDirection(uint newDirection) public {
                                                                        direction = Direction(newDirection);
                                                                    } // 숫자를 매개변수로 받고 그 인자를 사용해 기존의 방향을 바꿈.

