정적 배열 : 사이즈가 고정  ex) uint[5] fixedArray; 길이를 5로 지정.
동적 배열 : 사이즈가 무한대  ex) uint[] dynamicArray;

contract Mycontract {
uint[] myArray;
// 함수 외부
uint8[3] d = [1, 2, 3] // 함수 밖에서는 리터럴로 배열을 초기화해도 에러 발생 X
    function learnArrays() public {
        // 함수 내부
        uint256[] memory a = new uint256[](5); // 강제로 memory로 데이터 저장 위치를 설정 가능. 배열은 지역변수로 쓰일 때 storage임. a배열에는 양수값 5개만 저장될 수 있음.
                                            // new 키워드를 써서 배열의 크기를 초기화할 수 있음.
                                            // memory 배열에는 사이즈를 정해주는 것이 불가. 처음부터 사이즈 잘 설정.
        bytes32[] memory b = new bytes32[](10);

        a[0] = 1;
        a[1] = 2;

        uint8[3] memory c = [1, 2, 3]; //함수 내부에서 리터럴(대괄호 안의 값)을 통해 배열을 초기화할땐 저장 위치를 memory로 해야 함.
        uint8[3] d = [1, 2, 3]; // 이렇게 쓰면 에러남. 윗 문장처럼 써야 함.

        myArray.push(5); // 동적인 배열은 push 메서드로 값 추가 가능. 배열 끝에 값 저장. push 멤버는 저장위치가 memory일때는 못씀. storage만 가능.
        uint myArrayLength = myArray.length; // length 멤버로 배열 길이 리턴. memory, storage 둘다 쓸 수 있음.

    }

}